import os
import sys
import math

DEFAULT_HEADER_SIZE = 32

def bytes_to_hex(byte_data):
    """
    Return file headers in a hex string format.

    Parameters:
    byte_data (list): File header in byte format

    Returns:
    padded hex string generated by the bytes.
    """
    
    return ' '.join(f'{byte:02x}' for byte in byte_data)

def bytes_to_ascii(byte_data):
    """
    Return file headers in a human readable format.

    Parameters:
    byte_data (list): File header in byte format

    Returns:
    padded ascii string generated by the bytes.
    """

    return ' '.join(f'{chr(byte):>2}' for byte in byte_data)

def fraction_to_string(numerator, denominator):
    """
    Convert two integers to a fraction in string format.
    
    Parameters:
    numerator (int):    number on top of fraction
    denominator (int):  number on bottom of fraction
    
    Returns:
    space padded str containing 'numberator / denominator'
    """
    
    digits = int(math.log10(denominator)) + 1
    num = str(numerator).ljust(digits)
    den = str(denominator).ljust(digits)
    return f'{num} / {den}'

def list_distinct_headers(directory, extension, header_size):
    """
    List all distinct headers found in files with a specific extension.

    Parameters:
    directory (str): The path to the directory to search.
    extension (str): The file extension to filter by (including the dot).
    header_size (int): The number of bytes to be considered

    Returns:
    None
    """
    
    try:
        # Ensure the directory exists
        if not os.path.isdir(directory):
            print(f'The directory \'{directory}\' does not exist.')
            return

        # byte header -> (file name of first occurrence, count)
        headers = {}
        total_files = 0

        # Loop through the files in the directory
        for filename in os.listdir(directory):
            # Check if the file ends with the specified extension
            if filename.endswith(extension):
                with open(os.path.join(directory, filename), 'rb') as file:
                    total_files += 1
                    
                    # Read the first few bytes
                    bytes_read = file.read(header_size)
                
                    if bytes_read in headers:
                        old = headers[bytes_read]
                        headers[bytes_read] = (old[0], old[1] + 1)
                    else:
                        headers[bytes_read] = (filename, 1)

        # Display unique file headers
        if headers:
            # display header size for clarity
            print(f'Displaying the first {header_size} bytes')

            # display headers according to frequency
            keys = sorted(headers.keys(), key=lambda k: -headers[k][1])
            for key in keys:
                h = bytes_to_hex(key)
                a = bytes_to_ascii(key)
                
                # display headers with sample file name and count
                print(h, '\t', headers[key][0])
                print(a, '\t', fraction_to_string(headers[key][1], total_files))
        else:
            print('The directory was empty')

    except Exception as e:
        print(f'An error occurred: {e}')


if __name__ == '__main__':
    if len(sys.argv) < 3 or len(sys.argv) > 4:
        # improper use case
        print('Usage: python inspect.py <directory> <file_extension> [<limit>]')
    else:
        # grab parameters and call script
        dir_path = sys.argv[1]
        file_ext = sys.argv[2]
        header_size = int(sys.argv[3]) if len(sys.argv) == 4 else DEFAULT_HEADER_SIZE
        list_distinct_headers(dir_path, file_ext, header_size)